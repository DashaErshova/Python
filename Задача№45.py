# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284

# 220: 1 + 2 + 4+...+110 = 284
# 284: 1 + 2 + 4+...+142=220


n = int(input())  # Ввод числа n, указывающего на ограничение диапазона поиска дружественных чисел
list_1 = list()  # Создание пустого списка, в который будут добавляться пары дружественных чисел

for i in range(n):  # Цикл по числам в диапазоне от 0 до n-1
    summa = 0  # Переменная для хранения суммы делителей числа i

    # Цикл по числам в диапазоне от 1 до i//2 + 1
    # Вычисление суммы делителей числа i (исключая само число i)
    for j in range(1, i // 2 + 1):
        if i % j == 0:
            summa += j

    list_1.append((i, summa))  # Добавление пары (число i, сумма делителей числа i) в список list_1

# Поиск и вывод пар дружественных чисел
for i in range(len(list_1)):
    for j in range(i, len(list_1)):
        # Проверка условия дружественности чисел:
        # числа не совпадают, сумма делителей первого числа равна второму числу,
        # а сумма делителей второго числа равна первому числу
        if i != j and list_1[i][0] == list_1[j][1] and list_1[i][1] == list_1[j][0]:
            print(*list_1[i])  # Вывод пары дружественных чисел (первое число, второе число)
